/* Auto-generated file */
/* Header file : sys_simpleheader.h */


#ifndef __SIMPLE_GPAD_HEADER_
#define __SIMPLE_GPAD_HEADER_


typedef int uint_t; 
typedef float real_t;
/* Dimensions */
#define		NX              		4		/**< State dimension */
#define		NU              		1		/**< Input dimension */
#define		N               		10		/**< Prediction horizon */
#define		NC              		10		/**< Number of mixed state-input constraints */
#define		K               		4		/**< Number of scenarios (leaf nodes) */
#define		FN_NUMEL        		128		/**< Total number of elements to be stored in FN */
#define		GN_NUMEL        		32		/**< Total number of elements to be stored in gN */
#define		N_NODES         		39		/**< Number of nodes of the tree */
#define		N_CHILDREN_TOT  		38		/**< Total number of children */
#define		N_NONLEAF_NODES 		35		/**< Number of non-leaf nodes in the tree */
#define		DIM_GPAD_K_GAIN 		140		/**< Dimension of K (total number of elements) */
#define		test_size		100		/**< Number of test cases */
#define		test_cuda		0		/**< Check is it in testing mode */


/* Basic problem data */


/**** TREE DATA ****/

/** The stage of each node in the tree (std. node enumeration) */
uint_t TREE_STAGES[N_NODES] = {0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, };

/** Number of nodes at each stage 0,...,N */
uint_t TREE_NODES_PER_STAGE[N+1] = {1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, };

/** Cumulative counterpart of TREE_NODES_PRE_STAGE */
uint_t TREE_NODES_PER_STAGE_CUMUL[N+2] = {0, 1, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, };

/** Indices of the leaf nodes of the tree */
uint_t TREE_LEAVES[K] = {36, 37, 38, 39, };

/** Children indices (look-up array) */
uint_t TREE_CHILDREN[N_CHILDREN_TOT] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39};

/** Number of children of each node */
uint_t TREE_NUM_CHILDREN[N_NONLEAF_NODES] = {2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };

/** Ancestors of all nodes */
uint_t TREE_ANCESTOR[N_NODES] = {0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, };

/** Cumulative number of children */
uint_t TREE_N_CHILDREN_CUMUL[N_NODES] = {2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 38, 38, 38, };

/** Probability of every node */
real_t TREE_PROB[N_NODES] = {1, 0.383143, 0.616857, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, 0.105228, 0.105228, 0.447441, 0.447441, };

/** Matrix iterate */
uint_t iterate[1] = {3000};



/**** SYSTEM DATA ****/

/** Sizes of the terminal sets (# inequalities) */
uint_t FN_ROWS[K] = {8, 8, 8, 8, };

/** FN_ROWS cumulative */
uint_t FN_ROWS_CUMUL[K] = {0, 8, 16, 24, };

/** Cost function Q */
real_t Q[NX*NX] = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};

/** Cost function R */
real_t R[NX*NU] = {1};



/**** SOLVER DATA ****/

/** Matrix hessian */
real_t hessian[1] = {0.5};



/**** Test data for the GPAD ****/

/** Matrix dgpad_x0_test */
real_t dgpad_x0_test[NX*test_size] = {0.711892, 1.02511, -0.986205, 1.83898, 1.86551, -0.177017, 1.32908, 1.3161, -0.895324, -1.12182, -1.34701, -0.639863, -0.229438, -1.64299, -0.862098, 0.188431, -0.887701, -1.74622, -1.90403, -1.43392, 1.80027, -0.930954, 1.47748, -1.26162, -0.771719, -0.655176, 1.9836, 1.10405, -0.957161, 1.69166, 0.661243, 0.130922, 1.92568, -0.228301, 0.168586, -1.88239, -0.732281, -1.13074, 0.161677, 1.30333, -1.1108, -1.36923, 1.79182, -0.349523, -0.775148, -0.311269, -0.010356, -0.378511, -0.219747, 1.61232, 1.72813, -1.29314, -1.83357, 1.89949, -1.42077, -0.0245982, 1.74561, -0.823101, 0.509311, -0.447618, -0.89379, 0.538694, -0.921252, 1.20713, 0.458747, 0.223913, -0.408562, -0.569682, -1.18996, 0.48582, -1.26404, 1.86343, 0.955542, -1.36228, -1.7311, -1.13376, -1.38246, -1.56926, -0.290774, 1.47007, -1.15563, -1.7933, 1.16652, -1.48251, -1.38802, -1.90021, 1.49212, -1.64803, -0.327447, -1.14255, -0.400766, 1.52165, 0.765889, -0.491209, 1.89764, 1.55104, 0.287071, 1.48587, -1.82843, -1.86397, 1.7836, -1.66511, 1.14814, -1.66407, 1.70407, -0.00727431, -0.927338, -1.51971, 0.602912, 1.03435, -0.635549, -1.13964, -0.0998737, -0.258499, 1.43891, 1.23034, -1.64495, -0.320533, -1.88488, -0.442381, -1.96141, 0.815579, -0.40547, 0.443492, 1.99555, 0.208706, -0.357203, 0.519499, 0.0403306, 1.53928, -1.24458, -1.4345, -1.53243, -0.705618, -1.52852, 1.23711, -0.961873, -0.58291, -1.89493, 1.05641, 0.0233452, 0.840754, -1.2466, 1.72954, -0.531359, -1.23904, -1.06709, -1.16236, 0.340012, 0.0692088, -1.40185, -1.69428, -1.60467, -1.81086, 1.7946, 0.645882, -0.573311, 0.501298, -0.715638, -0.824674, -0.639752, -1.39286, -1.72875, 0.733569, 0.117498, -0.421433, 0.265377, -1.15785, -1.46716, -1.14962, -0.58427, -0.119008, -0.561589, 0.545909, 1.24004, 1.98541, 1.16994, 1.74994, -0.830511, 1.58101, -1.95455, -1.52293, -0.753108, 1.97974, -1.18919, 1.22915, -0.505331, 0.269866, -0.161217, -0.381079, -0.62666, 0.664859, 1.75075, 0.240612, -0.716869, 0.806662, 1.75785, -0.979676, -0.995342, -1.92301, -1.41437, -1.57964, 0.0287596, 0.841053, -1.59748, -1.06396, -1.37447, -1.28843, -0.921074, -0.444148, 0.618935, -0.314137, 1.02592, 1.07049, -0.908837, 0.666428, -0.45043, 1.24275, -1.01242, 0.965701, -1.10462, 1.20601, -0.913914, -1.95095, 1.08493, 0.15697, -1.94553, 0.0211059, 1.49486, -0.614381, 0.843529, -1.82287, 0.869721, 0.356991, -1.72255, -1.71826, 0.0998243, -0.679202, -0.573457, 0.224967, -0.268305, 1.45638, 0.226041, 1.38688, 1.11033, -1.17914, 1.84459, -0.635195, 1.95764, -0.0660216, 1.48726, -0.456432, 0.178844, 0.884736, 0.582925, 0.373344, 0.719038, 0.0554205, 0.929421, 0.818838, 0.364449, -1.28616, -1.41163, 0.199575, 1.3334, 0.369255, 1.80236, -0.959177, 0.287352, -1.62805, -0.312904, 0.647119, 0.491024, -1.79365, -0.414673, 0.285165, 0.817112, 0.0134542, 1.06506, 0.32084, 0.519198, 0.588671, -0.629639, 1.22818, 1.96074, -1.34095, 0.115176, -0.144974, -0.125194, -0.224732, 1.47839, -0.366458, 1.02897, -0.498033, 1.56148, 1.55087, -1.2127, -0.619895, -0.31298, -1.0426, 1.37498, -0.655317, 0.197762, 1.90526, 1.71588, 1.08722, 0.198504, 1.98373, -0.838183, 1.2449, -1.67672, -1.31026, -0.116768, -1.40922, 0.545257, -0.90133, 1.17073, -0.519471, -0.789982, -1.23686, -1.83753, 0.0270518, -1.1418, -1.59044, 0.283067, -0.632408, -0.536687, -1.6032, 1.48964, -1.30804, -1.32338, -0.363887, 0.41218, 1.85493, 1.15663, -1.76895, -1.70063, -0.602996, 0.862834, -1.63386, 1.34372, -0.0860042, 1.67508, -0.696827, -1.00292, 0.87129, 0.277951, 1.22461, 0.594006, 0.716081, -0.567561, -1.45252, -1.71415, 1.17519, -1.68547, -1.27543, -1.20621, -1.5413, -0.0456226, 0.990243, -0.640612, 0.581406, 1.77201, 1.11549, 0.143029, -1.79054, -0.812511, 0.426068, 1.78673, 0.635097, -1.95785, 0.21763, -0.783541, -1.24395, 1.12817, -0.844745, -1.12792, 0.441677, 1.73569, -0.761888, 0.736863, 0.370383, 1.7517, -0.361172, 1.27586, -0.833095, -1.76952, 0.567795, 0.0167395, -1.02097, 1.60289, 1.19276, 1.31535, -1.68761, -0.267273, -1.35346, 1.74842, 1.08964, 0.842585, -0.216676, };

/** Matrix dgpad_ures_test */
real_t dgpad_ures_test[NU*test_size] = {-0.381312, -0.899095, 2, 2, 2, -0.220087, -0.892703, -2, 0.228668, 1.30854, 0.385308, 0.579545, -2, -0.774449, 0.645538, 0.266739, 0.202179, 0.654964, 2, 2, 1.4216, 1.30926, 1.731, -0.922384, -0.00712658, 0.829274, 1.1079, -0.534063, -0.75012, 2, -0.481087, 0.0588235, -0.577648, 2, 2, 0.0908327, 2, 1.38183, 0.710155, 0.211517, 2, 0.457587, 2, -1.79947, -1.359, 2, -0.795617, 1.061, 0.277146, 2, 1.9981, 2, 0.239645, -0.466421, -0.490576, -0.354267, 1.66953, 0.0361986, 1.46811, 1.36179, -1.76295, -0.0196805, -1.08217, -1.36594, -0.74598, 2, -1.76679, 2, 2, -0.790951, -0.12322, 1.7243, -0.749441, -0.665991, 1.23426, 0.558655, -1.47138, 0.160701, 1.37548, 1.61846, 1.21685, 1.36477, 2, -2, 0.340501, -1.15468, -1.19309, -0.208286, 0.307627, 1.99199, -2, 2, 1.18456, 0.767059, -1.78167, -1.71152, 2, -0.0110689, 2, -1.89314, };



/**** Test DP step of GPAD ****/

/** Matrix dp_x_test */
real_t dp_x_test[NX*N_NODES] = {};

/** Matrix dp_u_test */
real_t dp_u_test[NU*N_NONLEAF_NODES] = {};

/** Matrix dp_y_test */
real_t dp_y_test[NC*N_NONLEAF_NODES+GN_NUMEL] = {};



/**** Test GPAD algorithm ****/

/** Matrix gpad_u_test */
real_t gpad_u_test[NU*N_NONLEAF_NODES] = {-1.89314, 0.387153, 0.742741, 1.06417, 0.940807, 1.11275, 1.08103, 0.730758, 0.744545, 0.940185, 0.972847, 0.610257, 0.701897, 0.856741, 0.880359, 0.798492, 0.948778, 1.02781, 1.0064, 1.05333, 1.20271, 1.27296, 1.17277, 1.12717, 1.20513, 1.21737, 1.14474, 0.817439, 0.885666, 0.826115, 0.788439, 0.214596, 0.271289, 0.15809, 0.178195, };



#endif /* __SIMPLE_GPAD_HEADER_ */
/* File generated automatically in 0.172s */